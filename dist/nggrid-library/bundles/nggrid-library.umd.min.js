!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/platform-browser"),require("@angular/forms"),require("rxjs"),require("@angular/core")):"function"==typeof define&&define.amd?define("nggrid-library",["exports","@angular/platform-browser","@angular/forms","rxjs","@angular/core"],t):t(e["nggrid-library"]={},e.ng.platformBrowser,e.ng.forms,e.rxjs,e.ng.core)}(this,function(e,t,n,r,a){"use strict";var o=function(){function e(){}return e.prototype.ngOnInit=function(){},e.decorators=[{type:a.Component,args:[{selector:"lib-NGGridLibrary",template:"\n    <p>\n      nggrid-library works! XXXXXXXXXXXXXXXXXXXXXXXXXXX\n    </p>\n  "}]}],e.ctorParameters=function(){return[]},e}(),s=function(){function e(){this.x={},this.data=new r.BehaviorSubject(this.x),this.currentData=this.data.asObservable()}return e.prototype.updateMessage=function(e){this.data.next(e)},e.decorators=[{type:a.Injectable}],e.ctorParameters=function(){return[]},e}(),i=function(){function e(e){this.gridService=e,this.pagerX={},this.searchObject={},this.pagedClicked=new a.EventEmitter}return e.prototype.uploadComplete=function(e){var t=this;this.gridService.currentData.subscribe(function(e){return t.searchObject=e}),this.searchObject.pageNo=e,this.pagedClicked.emit(this.searchObject)},e.prototype.ngOnInit=function(){},e.decorators=[{type:a.Component,args:[{selector:"app-pager",template:'\n      \n        <ul *ngIf="pagerX.datas.pages && pagerX.datas.pages.length" class="pagination">\n          <li [ngClass]="{disabled:pagerX.datas.currentPage === 1}">\n              <a   (click)="uploadComplete(1)">First</a>\n          </li>\n          <li [ngClass]="{disabled:pagerX.datas.currentPage === 1}">\n              <a (click)="uploadComplete(pagerX.datas.currentPage - 1)">Previous</a>\n          </li>\n          <li *ngFor="let page of pagerX.datas.pages" [ngClass]="{active:pagerX.datas.currentPage === page}">\n              <a (click)="uploadComplete(page)">{{page}}</a>\n          </li>\n          <li [ngClass]="{disabled:pagerX.datas.currentPage === pagerX.datas.totalPages}">\n              <a (click)="uploadComplete(pagerX.datas.currentPage + 1)">Next</a>\n          </li>\n          <li [ngClass]="{disabled:pagerX.datas.currentPage === pagerX.datas.totalPages}">\n              <a (click)="uploadComplete(pagerX.datas.totalPages)">Last</a>\n          </li>\n      </ul>   \n\n      \x3c!-- <pre>{{pagerX | json}}</pre>  --\x3e',styles:[""]}]}],e.ctorParameters=function(){return[{type:s}]},e.propDecorators={pagerX:[{type:a.Input}],pagedClicked:[{type:a.Output}]},e}(),c=function(){function e(e){this.gridService=e,this.dropDonwDefautlSelected=1,this.searchColumn="",this.searchText="",this.searchOptionsX={},this.searchClicked=new a.EventEmitter}return e.prototype.searchClick=function(e,t){var n={pageNo:1,searchColName:this.searchColumn,searchText:this.searchText};this.gridService.updateMessage(n),this.searchClicked.emit(n)},e.prototype.ngOnInit=function(){this.searchColumn=this.searchOptionsX[0].colName},e.decorators=[{type:a.Component,args:[{selector:"app-search",template:'<div  class="row">\n    <div class="col-md-4 col-sm-4 form-horizontal">\n      <div class="form-group">\n        <label class="col-sm-3 col-md-2 control-label">Search</label>\n        <div class="col-sm-9 col-md-10">\n          <select class="form-control"  [(ngModel)]="searchColumn" >\n\n             \n              <option *ngFor="let x of searchOptionsX; let index = index" [value]="x.colName" >\n                {{x.colName }}\n              </option>\n\n          </select>\n        </div>\n      </div>\n    </div>\n  \n  \n  \n    <div class="col-md-3 col-sm-3 form-horizontal">\n      <div class="form-group">\n        <label class="col-sm-2 col-md-2 control-label">Sort</label>\n        <div class="col-sm-10 col-md-10">\n          <select class="form-control">\n            <option> Asc</option>\n            <option> Dsc</option>\n          </select>\n        </div>\n      </div>\n    </div>\n  \n    <div class="col-md-3 col-sm-5 form-horizontal">\n      <div class="form-group">\n        <div class="col-md-12 col-sm-12">\n          <input id="textinput" name="textinput" type="text" [(ngModel)]="searchText" placeholder="Search Text" class="form-control">\n        </div>\n      </div>\n    </div>\n  \n    <div class="col-md-2 col-sm-12 form-horizontal">\n      <div class="form-group">\n        <div class="col-md-12 col-sm-12">\n          <button id="button1id" name="button1id" class="btn btn-success btn-block " (click)=\'searchClick(searchColumn,searchText)\' >Search..</button>\n        </div>\n      </div>\n    </div>\n  </div>'}]}],e.ctorParameters=function(){return[{type:s}]},e.propDecorators={searchOptionsX:[{type:a.Input}],searchClicked:[{type:a.Output}]},e}(),l=function(){function e(){}return e.decorators=[{type:a.NgModule,args:[{declarations:[i,c,o],imports:[n.FormsModule,t.BrowserModule],exports:[i,c,o],providers:[s]}]}],e}(),p=function g(){},d=function m(){},u=function h(){};e.NGGridLibraryComponent=o,e.NGGridLibraryModule=l,e.GridService=s,e.Grid=p,e.GridOptions=d,e.SearchObject=u,e.PagerComponent=i,e.SearchComponent=c,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=nggrid-library.umd.min.js.map